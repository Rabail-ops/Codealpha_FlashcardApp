import 'package:flutter/material.dart';

class Flashcard {
  String question;
  String answer;

  Flashcard({required this.question, required this.answer});
}

class FlashcardApp extends StatefulWidget {
  @override
  _FlashcardAppState createState() => _FlashcardAppState();
}

class _FlashcardAppState extends State<FlashcardApp> {
  List<Flashcard> flashcards = [];
  int quizIndex = 0;
  int score = 0;
  bool inQuizMode = false;
  bool showAnswer = false;

  TextEditingController questionController = TextEditingController();
  TextEditingController answerController = TextEditingController();

  void addFlashcard() {
    final question = questionController.text.trim();
    final answer = answerController.text.trim();
    if (question.isNotEmpty && answer.isNotEmpty) {
      setState(() {
        flashcards.add(Flashcard(question: question, answer: answer));
        questionController.clear();
        answerController.clear();
      });
    }
  }

  void startQuiz() {
    if (flashcards.isNotEmpty) {
      setState(() {
        inQuizMode = true;
        quizIndex = 0;
        score = 0;
        showAnswer = false;
      });
    }
  }

  void checkAnswer(bool correct) {
    if (correct) score++;
    if (quizIndex + 1 < flashcards.length) {
      setState(() {
        quizIndex++;
        showAnswer = false;
      });
    } else {
      setState(() {
        inQuizMode = false;
      });
      showDialog(
        context: context,
        builder:
            (_) => AlertDialog(
              title: Text('Quiz Finished!'),
              content: Text('Your score: $score / ${flashcards.length}'),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: Text('OK'),
                ),
              ],
            ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flashcard Quiz App',
      home: Scaffold(
        appBar: AppBar(title: Text('Flashcard Quiz App')),
        body: inQuizMode ? quizView() : flashcardForm(),
        floatingActionButton:
            inQuizMode
                ? null
                : FloatingActionButton(
                  onPressed: startQuiz,
                  child: Icon(Icons.play_arrow),
                  tooltip: 'Start Quiz',
                ),
      ),
    );
  }

  Widget flashcardForm() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        children: [
          TextField(
            controller: questionController,
            decoration: InputDecoration(labelText: 'Question'),
          ),
          TextField(
            controller: answerController,
            decoration: InputDecoration(labelText: 'Answer'),
          ),
          SizedBox(height: 16),
          ElevatedButton(onPressed: addFlashcard, child: Text('Add Flashcard')),
          SizedBox(height: 16),
          Text('Flashcards (${flashcards.length} added):'),
          Expanded(
            child: ListView.builder(
              itemCount: flashcards.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(flashcards[index].question),
                  subtitle: Text(flashcards[index].answer),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget quizView() {
    final currentCard = flashcards[quizIndex];
    return Padding(
      padding: const EdgeInsets.all(24.0),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            'Question ${quizIndex + 1} of ${flashcards.length}',
            style: TextStyle(fontSize: 20),
          ),
          SizedBox(height: 20),
          Text(currentCard.question, style: TextStyle(fontSize: 24)),
          SizedBox(height: 20),
          if (showAnswer)
            Column(
              children: [
                Text(
                  'Answer: ${currentCard.answer}',
                  style: TextStyle(fontSize: 20, color: Colors.green),
                ),
                SizedBox(height: 20),
                ElevatedButton(
                  onPressed: () => checkAnswer(true),
                  child: Text('Correct'),
                ),
                ElevatedButton(
                  onPressed: () => checkAnswer(false),
                  child: Text('Wrong'),
                ),
              ],
            )
          else
            ElevatedButton(
              onPressed: () => setState(() => showAnswer = true),
              child: Text('Show Answer'),
            ),
        ],
      ),
    );
  }
}
